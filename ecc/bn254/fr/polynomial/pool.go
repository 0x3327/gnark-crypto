// Copyright 2020 ConsenSys Software Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by consensys/gnark-crypto DO NOT EDIT

package polynomial

import (
	"encoding/json"
	"fmt"
	"github.com/consensys/gnark-crypto/ecc/bn254/fr"
	"reflect"
	"runtime"
	"sync"
	"unsafe"
)

// TODO: Implement configurable sizes, using calloc instead of arrays

// Sets a maximum for the array size we keep in pool
const maxNForLargePool int = 1 << 17
const maxNForSmallPool int = 256

// Aliases because it is annoying to use arrays in all the places
type largeArr = [maxNForLargePool]fr.Element
type smallArr = [maxNForSmallPool]fr.Element

var inUse = make(map[unsafe.Pointer][]uintptr)

func newInUse(slice []fr.Element) {
	pcs := make([]uintptr, 5)
	n := runtime.Callers(3, pcs)
	ptr := getDataPointer(slice)

	if prevPcs, ok := inUse[ptr]; ok {
		panic(fmt.Errorf("re-allocated non-dumped slice, previously allocated at %v", runtime.CallersFrames(prevPcs)))
	}

	inUse[ptr] = pcs[:n]
}

func dumpInUse(slice []fr.Element) {
	ptr := getDataPointer(slice)
	if _, ok := inUse[ptr]; !ok {
		panic("attempting to dump a slice not created by the pool")
	}
	delete(inUse, ptr)
}

func printFrame(frame runtime.Frame) {
	fmt.Printf("\t%s line %d, function %s\n", frame.File, frame.Line, frame.Function)
}

func printInUse() {
	fmt.Println("slices never dumped allocated at:")
	for _, pcs := range inUse {
		fmt.Println("-------------------------")

		var frame runtime.Frame
		frames := runtime.CallersFrames(pcs)
		more := true
		for more {
			frame, more = frames.Next()
			printFrame(frame)
		}
	}
}

type poolStats struct {
	Used      int
	Allocated int
	ReuseRate float64
	InUse     int
}

var poolsStats struct {
	Small poolStats
	Large poolStats

	InUse int
}

func (s *poolStats) maake() {
	s.Used++
	s.InUse++
}

func (s *poolStats) dump() {
	s.InUse--
}

func (s *poolStats) finalize() {
	s.ReuseRate = float64(s.Used) / float64(s.Allocated)
}

var (
	largePool = sync.Pool{
		New: func() interface{} {
			poolsStats.Large.Allocated++
			var res largeArr
			return &res
		},
	}
	smallPool = sync.Pool{
		New: func() interface{} {
			poolsStats.Small.Allocated++
			var res smallArr
			return &res
		},
	}
)

func giantPoolError(n int) error {
	return fmt.Errorf("slice too large: size is %v, max allowed is %v", n, maxNForLargePool)
}

// Make tries to find a reusable polynomial or allocates a new one
func Make(n int) (slice []fr.Element) {
	if n <= maxNForSmallPool {
		poolsStats.Small.maake()
		arr := smallPool.Get().(*smallArr)
		slice = arr[:n]
	} else if n <= maxNForLargePool {
		poolsStats.Large.maake()
		arr := largePool.Get().(*largeArr)
		slice = arr[:n]
	} else {
		panic(giantPoolError(n))
	}
	newInUse(slice)
	return
}

func getDataPointer(slice []fr.Element) unsafe.Pointer {
	header := (*reflect.SliceHeader)(unsafe.Pointer(&slice))
	return unsafe.Pointer(header.Data)
}

// Dump dumps a set of polynomials into the pool
func Dump(slices ...[]fr.Element) {
	for _, slice := range slices {
		n := len(slice)
		data := getDataPointer(slice)
		if n <= maxNForSmallPool {
			poolsStats.Small.dump()
			smallPool.Put((*smallArr)(data))
		} else if n <= maxNForLargePool {
			poolsStats.Large.dump()
			largePool.Put((*largeArr)(data))
		} else {
			panic(giantPoolError(n))
		}

		dumpInUse(slice)
	}
}

func PrintPoolStats() {
	poolsStats.Large.finalize()
	poolsStats.Small.finalize()
	poolsStats.InUse = poolsStats.Small.InUse + poolsStats.Large.InUse

	serialized, _ := json.MarshalIndent(poolsStats, "", "  ")
	fmt.Println(string(serialized))

	printInUse()
}
