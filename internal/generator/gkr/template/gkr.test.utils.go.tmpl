{{define "testHash"}}
type RationalTriplet struct {
	key1        {{.ElementType}}
	key2        {{.ElementType}}
	key2Present bool
	value       {{.ElementType}}
}

func (t *RationalTriplet) CmpKey(o *RationalTriplet) int {
	if cmp1 := t.key1.Cmp(&o.key1); cmp1 != 0 {
		return cmp1
	}

	if t.key2Present {
		if o.key2Present {
			return t.key2.Cmp(&o.key2)
		}
		return 1
	} else {
		if o.key2Present {
			return -1
		}
		return 0
	}
}

var hashCache = make(map[string]HashMap)

func getHash(t *testing.T, path string) HashMap {
	path, err := filepath.Abs(path)
	if err != nil {
		t.Error(err)
	}
	if h, ok := hashCache[path]; ok {
		return h
	}
	if bytes, err := os.ReadFile(path); err == nil {
		var asMap map[string]interface{}
		if err := json.Unmarshal(bytes, &asMap); err != nil {
			t.Error(err)
		}

		res := make(HashMap, 0, len(asMap))

		for k, v := range asMap {
			var entry RationalTriplet
			if _, err := {{setElement "entry.value" "v" .ElementType }}; err != nil {
				t.Error(err)
			}

			key := strings.Split(k, ",")

			switch len(key) {
			case 1:
				entry.key2Present = false
			case 2:
				entry.key2Present = true
				if _, err := {{setElement "entry.key2" "key[1]" .ElementType}}; err != nil {
					t.Error(err)
				}
			default:
				t.Errorf("cannot parse %T as one or two field elements", v)
			}
			if _, err := {{setElement "entry.key1" "key[0]" .ElementType }}; err != nil {
				t.Error(err)
			}

			res = append(res, &entry)
		}

		sort.Slice(res, func(i, j int) bool {
			return res[i].CmpKey(res[j]) <= 0
		})

		hashCache[path] = res

		return res

	} else {
		t.Error(err)
	}
	return nil //Unreachable
}

type HashMap []*RationalTriplet

type MapHashTranscript struct {
	hashMap         HashMap
	stateValid      bool
	resultAvailable bool
	state           {{.ElementType}}
}

func (m HashMap) hash(x *{{.ElementType}}, y *{{.ElementType}}) {{.ElementType}} {

	toFind := RationalTriplet{
		key1:        *x,
		key2Present: y != nil,
	}

	if y != nil {
		toFind.key2 = *y
	}

	i := sort.Search(len(m), func(i int) bool { return m[i].CmpKey(&toFind) >= 0 })

	if i < len(m) && m[i].CmpKey(&toFind) == 0 {
		return m[i].value
	}

	if y == nil {
		panic("No hash available for input " + x.Text(10))
	} else {
		panic("No hash available for input " + x.Text(10) + "," + y.Text(10))
	}
}

func (m *MapHashTranscript) Update(i ...interface{}) {
	if len(i) > 0 {
		for _, x := range i {

			var xElement {{.ElementType}}
			if _, err := xElement.SetInterface(x); err != nil {
				panic(err.Error())
			}
			if m.stateValid {
				m.state = m.hashMap.hash(&xElement, &m.state)
			} else {
				m.state = m.hashMap.hash(&xElement, nil)
			}

			m.stateValid = true
		}
	} else { //just hash the state itself
		if !m.stateValid {
			panic("nothing to hash")
		}
		m.state = m.hashMap.hash(&m.state, nil)
	}
	m.resultAvailable = true
}

func (m *MapHashTranscript) Next(i ...interface{}) {{.ElementType}} {

	if len(i) > 0 || !m.resultAvailable {
		m.Update(i...)
	}
	m.resultAvailable = false
	return m.state
}

func (m *MapHashTranscript) NextN(N int, i ...interface{}) []{{.ElementType}} {

	if len(i) > 0 {
		m.Update(i...)
	}

	res := make([]{{.ElementType}}, N)

	for n := range res {
		res[n] = m.Next()
	}

	return res
}
{{end}}

{{define "circuitCache"}}

type WireInfo struct {
	Gate   string  `json:"gate"`
	Inputs [][]int `json:"inputs"`
}

type CircuitInfo [][]WireInfo

var circuitCache = make(map[string]Circuit)

func getCircuit(t *testing.T, path string) Circuit {
	path, err := filepath.Abs(path)
	if err != nil {
		t.Error(err)
	}
	if circuit, ok := circuitCache[path]; ok {
		return circuit
	}
	if bytes, err := os.ReadFile(path); err == nil {
		var circuitInfo CircuitInfo
		if err := json.Unmarshal(bytes, &circuitInfo); err == nil {
			circuit := circuitInfo.toCircuit()
			circuitCache[path] = circuit
			return circuit
		} else {
			t.Error(err)
		}
	} else {
		t.Error(err)
	}
	return nil //unreachable
}

func (c CircuitInfo) toCircuit() (circuit Circuit) {
	isOutput := make(map[*Wire]interface{})
	circuit = make(Circuit, len(c))
	for i := len(c) - 1; i >= 0; i-- {
		circuit[i] = make(CircuitLayer, len(c[i]))
		for j, wireInfo := range c[i] {
			circuit[i][j].Gate = gates[wireInfo.Gate]
			circuit[i][j].Inputs = make([]*Wire, len(wireInfo.Inputs))
			isOutput[&circuit[i][j]] = nil
			for k, inputCoord := range wireInfo.Inputs {
				if len(inputCoord) != 2 {
					panic("circuit wire has two coordinates")
				}
				input := &circuit[inputCoord[0]][inputCoord[1]]
				input.NumOutputs++
				circuit[i][j].Inputs[k] = input
				delete(isOutput, input)
			}
			if (i == len(c)-1) != (len(circuit[i][j].Inputs) == 0) {
				panic("wire is input if and only if in last layer")
			}
		}
	}

	for k := range isOutput {
		k.NumOutputs = 1
	}

	return
}

var gates map[string]Gate

func init() {
	gates = make(map[string]Gate)
	gates["identity"] = identityGate{}
	gates["mul"] = mulGate{}
	gates["mimc"] = mimcCipherGate{} //TODO: Add ark
}

type mimcCipherGate struct {
	ark {{.ElementType}}
}

func (m mimcCipherGate) Evaluate(input ...{{.ElementType}}) (res {{.ElementType}}) {
	var sum {{.ElementType}}

	sum.
		Add(&input[0], &input[1]).
		Add(&sum, &m.ark)

	res.Square(&sum)    // sum^2
	res.Mul(&res, &sum) // sum^3
	res.Square(&res)    //sum^6
	res.Mul(&res, &sum) //sum^7

	return
}

func (m mimcCipherGate) Degree() int {
	return 7
}

{{end}}

{{define "serializationUtils"}}

func sliceToElementSlice(t *testing.T, slice []interface{}) (elementSlice []{{.ElementType}}) {
	elementSlice = make([]{{.ElementType}}, len(slice))
	for i, v := range slice {
		if _, err := {{setElement "elementSlice[i]" "v" .ElementType}}; err != nil {
			t.Error(err)
		}
	}
	return
}

func sliceEquals(a []{{.ElementType}}, b []{{.ElementType}}) error {
	if len(a) != len(b) {
		return fmt.Errorf("length mismatch %d≠%d", len(a), len(b))
	}
	for i := range a {
		if !a[i].Equal(&b[i]) {
			return fmt.Errorf("at index %d: %s ≠ %s", i, a[i].String(), b[i].String())
		}
	}
	return nil
}

func assertProofEquals(t *testing.T, expected Proof, seen Proof) {
	assert.Equal(t, len(expected), len(seen))
	for i, x := range expected {
		xSeen := seen[i]
		assert.Equal(t, len(x), len(xSeen))
		for j, y := range x {
			ySeen := xSeen[j]

			if ySeen.FinalEvalProof == nil {
				assert.Equal(t, 0, len(y.FinalEvalProof.([]{{.ElementType}})))
			} else {
				assert.Equal(t, y.FinalEvalProof, ySeen.FinalEvalProof)
			}
			assert.Equal(t, len(y.PartialSumPolys), len(ySeen.PartialSumPolys))
			for k, z := range y.PartialSumPolys {
				zSeen := ySeen.PartialSumPolys[k]
				assert.NoError(t, sliceEquals(z, zSeen))
			}
		}
	}
}

type PrintableProof [][]PrintableSumcheckProof

type PrintableSumcheckProof struct {
	FinalEvalProof  interface{}     `json:"finalEvalProof"`
	PartialSumPolys [][]interface{} `json:"partialSumPolys"`
}

func unmarshalProof(t *testing.T, printable PrintableProof) (proof Proof) {
	proof = make(Proof, len(printable))
	for i := range printable {
		proof[i] = make([]sumcheck.Proof, len(printable[i]))
		for j, printableSumcheck := range printable[i] {
			finalEvalProof := []{{.ElementType}}(nil)

			if printableSumcheck.FinalEvalProof != nil {
				finalEvalSlice := reflect.ValueOf(printableSumcheck.FinalEvalProof)
				finalEvalProof = make([]{{.ElementType}}, finalEvalSlice.Len())
				for k := range finalEvalProof {
					_, err := {{setElement "finalEvalProof[k]" "finalEvalSlice.Index(k).Interface()" .ElementType}}
					assert.NoError(t, err)
				}
			}

			proof[i][j] = sumcheck.Proof{
				PartialSumPolys: make([]polynomial.Polynomial, len(printableSumcheck.PartialSumPolys)),
				FinalEvalProof:  finalEvalProof,
			}
			for k := range printableSumcheck.PartialSumPolys {
				proof[i][j].PartialSumPolys[k] = sliceToElementSlice(t, printableSumcheck.PartialSumPolys[k])
			}
		}
	}
	return
}

{{- if eq .ElementType "fr.Element"}}
func setElement(element *fr.Element, value interface{}) (*fr.Element, error) {

	if str, ok := value.(string); ok {
		// TODO: Put this in element.SetString?
		if fracI := strings.Index(str, "/"); fracI != -1 {
			numStr, denomStr := str[:fracI], str[fracI+1:]
			var denom fr.Element
			if _, err := element.SetString(numStr); err != nil {
				return nil, err
			}
			if _, err := denom.SetString(denomStr); err != nil {
				return nil, err
			}
			denom.Inverse(&denom)
			element.Mul(element, &denom)
			return element, nil
		}
	}
	return element.SetInterface(value)
}
{{- end}}
{{end}}
{{- define "setElement element value elementType"}}
{{- if eq .elementType "fr.Element"}} setElement(&{{.element}}, {{.value}})
{{- else if eq .elementType "small_rational.SmallRational"}} {{.element}}.SetInterface({{.value}})
{{- else}}
	{{print "\"UNEXPECTED TYPE" .elementType "\""}}
{{- end}}
{{- end}}

{{define "testVectorCache"}}

type TestCase struct {
	Circuit         Circuit
	Transcript      sumcheck.ArithmeticTranscript
	Proof           Proof
	FullAssignment  WireAssignment
	InOutAssignment WireAssignment
}

type TestCaseInfo struct {
	Hash    string          `json:"hash"`
	Circuit string          `json:"circuit"`
	Input   [][]interface{} `json:"input"`
	Output  [][]interface{} `json:"output"`
	Proof   PrintableProof  `json:"proof"`
}

type ParsedTestCase struct {
	FullAssignment  WireAssignment
	InOutAssignment WireAssignment
	Proof           Proof
	Hash            HashMap
	Circuit         Circuit
}

var parsedTestCases = make(map[string]*ParsedTestCase)

func newTestCase(t *testing.T, path string) *TestCase {
	path, err := filepath.Abs(path)
	assert.NoError(t, err)
	dir := filepath.Dir(path)

	parsedCase, ok := parsedTestCases[path]
	if !ok {
		if bytes, err := os.ReadFile(path); err == nil {
			var info TestCaseInfo
			err = json.Unmarshal(bytes, &info)
			if err != nil {
				t.Error(err)
			}

			circuit := getCircuit(t, filepath.Join(dir, info.Circuit))
			hash := getHash(t, filepath.Join(dir, info.Hash))
			proof := unmarshalProof(t, info.Proof)

			fullAssignment := make(WireAssignment)
			inOutAssignment := make(WireAssignment)
			assignmentSize := len(info.Input[0])

			{
				i := len(circuit) - 1

				assert.Equal(t, len(circuit[i]), len(info.Input), "Input layer not the same size as input vector")

				for j := range circuit[i] {
					wire := &circuit[i][j]
					wireAssignment := sliceToElementSlice(t, info.Input[j])
					fullAssignment[wire] = wireAssignment
					inOutAssignment[wire] = wireAssignment
				}
			}

			for i := len(circuit) - 2; i >= 0; i-- {
				for j := range circuit[i] {
					wire := &circuit[i][j]
					assignment := make(polynomial.MultiLin, assignmentSize)
					in := make([]{{.ElementType}}, len(wire.Inputs))
					for k := range assignment {
						for l, inputWire := range circuit[i][j].Inputs {
							in[l] = fullAssignment[inputWire][k]
						}
						assignment[k] = wire.Gate.Evaluate(in...)
					}

					fullAssignment[wire] = assignment
				}
			}

			assert.Equal(t, len(circuit[0]), len(info.Output), "Output layer not the same size as output vector")
			for j := range circuit[0] {
				wire := &circuit[0][j]
				inOutAssignment[wire] = sliceToElementSlice(t, info.Output[j])
				assert.NoError(t, sliceEquals(inOutAssignment[wire], fullAssignment[wire]), "circuit output mismatch on wire 0,%d", j)
			}

			parsedCase = &ParsedTestCase{
				FullAssignment:  fullAssignment,
				InOutAssignment: inOutAssignment,
				Proof:           proof,
				Hash:            hash,
				Circuit:         circuit,
			}

			parsedTestCases[path] = parsedCase
		} else {
			t.Error(err)
		}
	}

	return &TestCase{
		Circuit:         parsedCase.Circuit,
		Transcript:      &MapHashTranscript{hashMap: parsedCase.Hash},
		FullAssignment:  parsedCase.FullAssignment,
		InOutAssignment: parsedCase.InOutAssignment,
		Proof:           parsedCase.Proof,
	}
}

{{end}}